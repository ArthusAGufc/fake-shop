name: CI-CD - Fake Shop

# 🚀 Gatilhos que iniciam o pipeline
on:
  push:
    branches: ["main"]        # Sempre que houver push na branch main
  workflow_dispatch:          # Permite executar o workflow manualmente pelo GitHub

jobs:
  CI:
    runs-on: ubuntu-latest    # Ambiente que o job será executado

    steps:
    - name: 📦 Checkout do código
      uses: actions/checkout@v4.2.2
      # Baixa o código do repositório para dentro da VM do GitHub Actions

    - name: 🔐 Login no Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # Autentica no Docker Hub usando as secrets configuradas no GitHub

    - name: 🛠️ Build e Push da imagem
      uses: docker/build-push-action@v6
      with:
        context: ./src                    # Caminho onde está o Dockerfile
        file: ./src/Dockerfile            # Caminho do Dockerfile
        push: true                        # Faz push da imagem para o Docker Hub
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/fake-shop-desafio:v${{ github.run_number }}
          ${{ secrets.DOCKER_USERNAME }}/fake-shop-desafio:latest
      # Cria duas tags para a imagem: uma com o número da execução e uma 'latest'

  CD:
    needs: [CI]                  # Só roda depois do job CI
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout do código
      uses: actions/checkout@v4.2.2

    - name: ⚙️ Configurar Kubeconfig
      uses: azure/k8s-set-context@v4
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}
      # Usa a action da Azure pra configurar o acesso ao cluster com o kubeconfig (em base64)

    - name: 🚀 Fazer o deploy no Kubernetes
      uses: azure/k8s-deploy@v5
      with:
        manifests: k8s/deployment.yaml
        images: ${{ secrets.DOCKER_USERNAME }}/fake-shop-desafio:v${{ github.run_number }}
      # Faz o deploy do manifesto Kubernetes substituindo a imagem pelo valor atualizado
